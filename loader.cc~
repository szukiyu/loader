#include "tensorflow/core/public/session.h"
#include "tensorflow/core/platform/env.h"
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace tensorflow;


void sample_batch(double X_train[30], double y_train[30], int batch_size,int num_steps){
}


int main(int argc, char* argv[]) {
  
  std::ifstream testfile("data/TEST_batch1000");
  std::ifstream trainfile("data/TEST_batch1000");

  std::vector<std::vector<string>> testvalues;
  std::vector<std::vector<string>> trainvalues;

  string str;
  int p;

  if(file.fail()){
    std::cout << "failed." << std::endl;
    exit(0);
  }

  while(getline(file, str)){
    //コンマがあるかを探し、そこまでをvaluesに格納
    while( (p = str.find(",")) != string::npos ){
      inner.push_back(str.substr(0, p));

      str = str.substr(p+1);
    }
    inner.push_back(str);
    values.push_back(inner);
  }

  for(unsigned int i = 0; i < values.size(); ++i){
    for(unsigned int j = 0; j < values[i].size(); ++j){
      std::cout << values[i][j] << ",";
    }
    std::cout <<  std::endl;
  }

  std::vector<std::vector<double>> X_train_norm;
  std::vector<double>  y_train_norm;

  for(unsigned int i = 0; i < values.size(); ++i){
    for(unsigned int j = 0; j < values[i].size(); ++j){

      std::stringstream ss;
      double a;
      ss << values[i][j];
      ss >> a;

      if(j != 0)
	X_train_norm[i].push_back(a);
      else
	y_train_norm.push_back(a);
    }
    std::cout <<  std::endl;
  }

  

  // Initialize a tensorflow session
  Session* session;
  Status status = NewSession(SessionOptions(), &session);
  if (!status.ok()) {
    std::cout << status.ToString() << "\n";
    return 1;
  }

  // Read in the protobuf graph we exported
  // (The path seems to be relative to the cwd. Keep this in mind
  // when using `bazel run` since the cwd isn't where you call
  // `bazel run` but from inside a temp folder.)
  GraphDef graph_def;
  status = ReadBinaryProto(Env::Default(), "models/graph.pb", &graph_def);
  if (!status.ok()) {
    std::cout << status.ToString() << "\n";
    return 1;
  }

  // Add the graph to the session
  status = session->Create(graph_def);
  if (!status.ok()) {
    std::cout << status.ToString() << "\n";
    return 1;
  }

  // Setup inputs and outputs:

  // Our graph doesn't require any inputs, since it specifies default values,
  // but we'll change an input to demonstrate.
  Tensor a(DT_FLOAT, TensorShape());
  a.scalar<float>()() = 3.0;

  Tensor b(DT_FLOAT, TensorShape());
  b.scalar<float>()() = 2.0;

  std::vector<std::pair<string, tensorflow::Tensor>> inputs = {
    { "a", a },
    { "b", b },
  };

  // The session will initialize the outputs
  std::vector<tensorflow::Tensor> outputs;

  // Run the session, evaluating our "c" operation from the graph
  status = session->Run(inputs, {"c"}, {}, &outputs);
  //status = session->Run(input_data: X_batch,targets:y_batch, initial_state:state,keep_prob:1});
  if (!status.ok()) {
    std::cout << status.ToString() << "\n";
    return 1;
  }

  // Grab the first output (we only evaluated one graph node: "c")
  // and convert the node to a scalar representation.
  auto output_c = outputs[0].scalar<float>();

  // (There are similar methods for vectors and matrices here:
  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/public/tensor.h)

  // Print the results
  std::cout << outputs[0].DebugString() << "\n"; // Tensor<type: float shape: [] values: 30>
  std::cout << output_c() << "\n"; // 30

  // Free any resources used by the session
  session->Close();
  return 0;
}
